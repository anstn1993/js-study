// //var로 선언한 변수는 '정적인' 방식으로 생성되는 지역변수다.
// //프로세스가 시작될 때 var를 이용해 선언한 모든 변수를 다 찾고 시작한다는 것을 의미한다.

// var a = 1;
// console.log(a); //1

// //위와 같은 경우는 당연히 출력이 된다.

// console.log(a); //undefined
// var a = 1;

// //이 경우는 undefined를 출력하는데 이는 변수가 선언되긴 했지만 값이 할당되지는 않았음을 의미한다.
// //하지만 var가 뒤에 나왔음에도 불구하고 선언을 했다는 건 인식하고 있다는 것이다.

// //하지만 전역 변수로 선언할 경우에는 '동적인' 방식으로 생성된다.

// a = 1;
// console.log(a); //1

// //var를 쓰지 않고 변수를 선언하면 기본적으로 전역 객체인 window객체에 들어가게 된다.

// console.log(a); //정의되지 않은 값
// a = 1;

// //위와 같이 쓰게 되면 var를 이용해 선언한 것이 아니기 때문에 a라는 변수는 아예 없는 변수가 된다.
// //값을 할당해주는 순간에야 window객체의 값으로 들어간다.

// //전역 변수는 당연히 어느 scope에서든 다 쓸 수 있다.
// a = 1;

// var f1 = function() {
//   a++;
// };

// f1();
// console.log(a); //2

// //전역변수이기 때문에 함수 안에서 1이 증가해도 함수 scope바깥에서도 값이 유지된다.

// a = 1;

// var f1 = function() {
//   var a = 3;
//   a++;
// };

// f1();
// console.log(a); //1

// //함수 안에서 전역변수와 똑같은 이름의 지역변수가 선언되고 사용되면 지역변수가 우선순위를 가진다.

// //자바스크립트의 또 다른 특이한 점은 똑같은 이름의 변수를 계속 선언해도 된다는 점이다.

// var a = 1;
// var a = 2;

// console.log(a); //2

// //다른 언어에서는 위와 같이 변수를 선언하면 오류가 발생하게 된다.

// {
//   var a = 1;
// }

// console.log(a); //1

// //자바스크립트는 중괄호가 scope를 부여하지 않는다.

// function f1() {
//     var a = 1;
// }

// f1();
// console.log(a);//정의되지 않은 값

// //함수 안에서 선언한 지역변수는 함수가 종료되면 사라진다. 

// function f1 () {
//     a = 1;
// }

// f1();
// console.log(a);//1

// //함수 안에서도 위와 같이 var를 쓰지 않고 변수를 쓰면 window전역객체에 붙게 된다. 


f1 = function () {
    var a = 1;
    f2();
    function f2 () {
        var a = 2;
        f3();
        function f3() {
            var a = 3;
        }
    }
}

f1();
console.log(a);//undefind

//js는 위와 같이 함수 안에 함수를 정의해서 쓸 수 있다.